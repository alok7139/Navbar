import React, { useEffect, useState } from "react";
import axios from "axios";
import { Eye } from "lucide-react";
import { useNavigate } from "react-router-dom";
import VerificationDetails from "./VerificationDetails";
import "./DocumentVerificationApp.css";

const API_BASE = "http://localhost:8080";

const DocumentVerificationApp = () => {
  const [view, setView] = useState("list");
  const [selectedApp, setSelectedApp] = useState(null);
  const [applications, setApplications] = useState([]);

  const [showRejectModal, setShowRejectModal] = useState(false);
  const [rejectionReason, setRejectionReason] = useState("");
  const [rejectionError, setRejectionError] = useState("");

  const token = localStorage.getItem("token");
  const navigate = useNavigate();

  // ✅ Fetch pending applications
  const fetchPending = async () => {
    try {
      const res = await axios.get(`${API_BASE}/api/document-verification/pending`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setApplications(res.data);
    } catch (err) {
      console.error("Fetch Pending Error", err);
    }
  };

  useEffect(() => {
    fetchPending();
  }, []);

  // ✅ Fetch full Application by appId
  const loadApplicationDetails = async (appId) => {
    try {
      const res = await axios.get(`${API_BASE}/api/application/${appId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setSelectedApp(res.data);
      setView("details");
    } catch (err) {
      console.error("Details Fetch Error", err);
    }
  };

  // ✅ Approve action
  const handleApprove = async () => {
    try {
      await axios.post(
        `${API_BASE}/api/document-verification/verify`,
        {
          appId: selectedApp.appId,
          status: "APPROVED",
          reason: "",
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      alert("✅ Application Approved!");
      setView("list");
      fetchPending();
    } catch (err) {
      console.error("Approve Error", err);
      alert("Approval failed!");
    }
  };

  // ✅ Reject action
  const handleRejectSubmit = async () => {
    if (!rejectionReason.trim()) {
      setRejectionError("Reason required!");
      return;
    }

    try {
      await axios.post(
        `${API_BASE}/api/document-verification/verify`,
        {
          appId: selectedApp.appId,
          status: "REJECTED",
          reason: rejectionReason,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      alert("❌ Application Rejected!");

      setShowRejectModal(false);
      setRejectionReason("");
      setView("list");
      fetchPending();
    } catch (err) {
      console.error("Reject Error", err);
      alert("Rejection failed!");
    }
  };

  // ✅ Render Details Page
  if (view === "details" && selectedApp) {
    return (
      <VerificationDetails
        application={selectedApp}
        onBack={() => setView("list")}
        onApprove={handleApprove}
        onReject={() => setShowRejectModal(true)}
        showRejectModal={showRejectModal}
        setShowRejectModal={setShowRejectModal}
        rejectionReason={rejectionReason}
        setRejectionReason={setRejectionReason}
        rejectionError={rejectionError}
        setRejectionError={setRejectionError}
        handleRejectSubmit={handleRejectSubmit}
      />
    );
  }

  return (
    <div className="verification-container">
      <div className="verification-content">
        <table className="applications-table">
          <thead>
            <tr>
              <th>App ID</th>
              <th>User Name</th>
              <th>Phone</th>
              <th>Date</th>
              <th>Status</th>
              <th>Action</th>
            </tr>
          </thead>

          <tbody>
            {applications.map((app) => (
              <tr key={app.appId}>
                <td>{app.appId}</td>
                <td>{app.fullName}</td>
                <td>{app.phoneNumber}</td>
                <td>{app.submittedAt?.split("T")[0]}</td>
                <td>{app.documentVerificationStatus}</td>

                <td>
                  <button
                    className="verify-btn"
                    onClick={() => loadApplicationDetails(app.appId)}
                  >
                    <Eye size={18} /> View / Verify
                  </button>
                </td>
              </tr>
            ))}

            {applications.length === 0 && (
              <tr>
                <td colSpan="6" className="text-center">No pending applications</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default DocumentVerificationApp;





import React, { useState } from "react";
import axios from "axios";
import { ArrowLeft, CheckCircle, XCircle } from "lucide-react";
import "./VerificationDetails.css";

const API_BASE = "http://localhost:8080";

const VerificationDetails = ({ application, onBack }) => {
  const [reason, setReason] = useState("");
  const [loading, setLoading] = useState(false);

  const token = localStorage.getItem("token");

  // ✅ Approve API
  const handleApprove = async () => {
    setLoading(true);
    try {
      await axios.put(
        `${API_BASE}/api/document-verification/${application.id}/approve`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      alert("✅ Application Approved");
      onBack();
    } catch (err) {
      console.error(err);
      alert("Error approving!");
    }
    setLoading(false);
  };

  // ✅ Reject API
  const handleReject = async () => {
    if (!reason.trim()) {
      alert("⚠ Please provide a valid reason!");
      return;
    }
    setLoading(true);

    try {
      await axios.put(
        `${API_BASE}/api/document-verification/${application.id}/reject`,
        reason,
        {
          headers: {
            "Content-Type": "text/plain",
            Authorization: `Bearer ${token}`
          }
        }
      );

      alert("❌ Application Rejected");
      onBack();
    } catch (err) {
      console.error(err);
      alert("Error rejecting!");
    }

    setLoading(false);
  };

  return (
    <div className="details-container">
      <button className="back-btn" onClick={onBack}>
        <ArrowLeft size={18} /> Back
      </button>

      <h2 className="details-title">
        Application Details (ID: {application.id})
      </h2>

      <div className="details-card">
        <p><strong>User:</strong> {application.userName}</p>
        <p><strong>Email:</strong> {application.email}</p>
        <p><strong>Phone:</strong> {application.phone}</p>
        <p><strong>Card Type:</strong> {application.cardType}</p>
        <p><strong>Submitted:</strong> {application.submittedDate}</p>
      </div>

      {/* --- Document Previews Section --- */}
      <h3 className="documents-title">Uploaded Documents</h3>
      <div className="document-list">
        {application.documents?.map((doc, idx) => (
          <div className="document-item" key={idx}>
            <p>{doc.fileType}</p>
            <a
              href={`${API_BASE}/api/document/${doc.documentId}`}
              target="_blank"
              rel="noopener noreferrer"
              className="view-doc-btn"
            >
              View Document
            </a>
          </div>
        ))}
      </div>

      {/* Reject Reason Box */}
      <textarea
        className="reason-box"
        placeholder="Enter rejection reason..."
        value={reason}
        onChange={(e) => setReason(e.target.value)}
      ></textarea>

      <div className="action-buttons">
        <button
          className="approve-btn"
          onClick={handleApprove}
          disabled={loading}
        >
          <CheckCircle size={18} /> Approve
        </button>

        <button
          className="reject-btn"
          onClick={handleReject}
          disabled={loading}
        >
          <XCircle size={18} /> Reject
        </button>
      </div>
    </div>
  );
};

export default VerificationDetails;





import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { FileText, Calendar, CheckCircle, XCircle, Filter, X, Search, Eye } from 'lucide-react';
import VerificationDetails from './VerificationDetails';
import './DocumentVerificationApp.css';

const API_BASE = "http://localhost:8080"; // Change if needed

const DocumentVerificationApp = () => {
  const [view, setView] = useState('list');
  const [selectedApp, setSelectedApp] = useState(null);
  const [applications, setApplications] = useState([]);
  const [showFilters, setShowFilters] = useState(false);
  const [showReasonModal, setShowReasonModal] = useState(false);
  const [selectedReason, setSelectedReason] = useState('');

  const [filters, setFilters] = useState({
    search: '',
    status: 'all',
    cardType: 'all'
  });

  const token = localStorage.getItem("token");

  // ✅ Fetch pending applications from API
  const fetchPendingApplications = async () => {
    try {
      const res = await axios.get(`${API_BASE}/api/document-verification/pending`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const mapped = res.data.map(app => ({
        id: app.appId,
        userName: app.fullName,
        email: app.email,
        phone: app.phoneNumber,
        submittedDate: app.submittedAt?.split("T")[0],
        status: app.documentVerificationStatus.toLowerCase(),
        cardType: app.cardType
      }));

      setApplications(mapped);

    } catch (err) {
      console.error("Fetch error", err);
    }
  };

  useEffect(() => {
    fetchPendingApplications();
  }, []);

  const filteredApplications = applications.filter(app => {
    const s = filters.search.toLowerCase();
    const searchMatch =
      app.userName.toLowerCase().includes(s) ||
      app.id.toLowerCase().includes(s) ||
      app.email.toLowerCase().includes(s) ||
      app.phone.includes(filters.search) ||
      app.submittedDate.includes(filters.search) ||
      app.cardType.toLowerCase().includes(s);

    const statusMatch = filters.status === "all" || app.status === filters.status;
    const cardMatch = filters.cardType === "all" || app.cardType === filters.cardType.toUpperCase();

    return searchMatch && statusMatch && cardMatch;
  });

  const stats = {
    total: applications.length,
    pending: applications.filter(a => a.status === "in_progress").length
  };

  const getStatusBadge = (status) => {
    const badges = {
      in_progress: { class: 'status-inprogress', icon: <Calendar size={16} />, text: 'Progress' },
      approved: { class: 'status-approved', icon: <CheckCircle size={16} />, text: 'Approved' },
      rejected: { class: 'status-rejected', icon: <XCircle size={16} />, text: 'Rejected' }
    };

    const badge = badges[status] || badges.in_progress;

    return (
      <span className={`status-badge ${badge.class}`}>
        {badge.icon}
        {badge.text}
      </span>
    );
  };

  // ✅ Click Verify → Switch to details view
  const handleVerify = (app) => {
    setSelectedApp(app);
    setView("details");
  };

  if (view === "details" && selectedApp) {
    return <VerificationDetails
      application={selectedApp}
      onBack={() => {
        setSelectedApp(null);
        setView("list");
        fetchPendingApplications(); // Refresh list after action
      }}
    />;
  }

  return (
    <div className="verification-container">
      <header className="verification-header">
        <div className="header-content">
          <div className="header-left">
            <h1 className="page-title">Document Verification</h1>
            <p className="page-subtitle">Review and verify submitted documents</p>
          </div>
          <div className="header-stats">
            <div className="stat-card">
              <div className="stat-icon stat-icon-total">
                <FileText size={24} />
              </div>
              <div className="stat-info">
                <p className="stat-label">Total Applications</p>
                <p className="stat-value">{stats.total}</p>
              </div>
            </div>
            <div className="stat-card">
              <div className="stat-icon stat-icon-pending">
                <Calendar size={24} />
              </div>
              <div className="stat-info">
                <p className="stat-label">Pending Review</p>
                <p className="stat-value">{stats.pending}</p>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* ✅ Table SAME as your UI */}
      <div className="verification-content">
        <div className="table-container">
          <div className="table-wrapper">
            {filteredApplications.length > 0 ? (
              <table className="applications-table">
                <thead>
                  <tr>
                    <th>Application ID</th>
                    <th>User Name</th>
                    <th>Phone</th>
                    <th>Submitted Date</th>
                    <th>Status</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredApplications.map((app, idx) => (
                    <tr key={app.id}>
                      <td><span className="app-id">{app.id}</span></td>
                      <td><div className="user-name">{app.userName}</div></td>
                      <td><span className="phone-text">{app.phone}</span></td>
                      <td><span className="date-text">{app.submittedDate}</span></td>
                      <td>{getStatusBadge(app.status)}</td>
                      <td>
                        <button className="verify-btn" onClick={() => handleVerify(app)}>
                          <Eye size={18} />
                          Verify
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              <p>No pending applications found.</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DocumentVerificationApp;
