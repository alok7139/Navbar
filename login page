
import React, { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import "./Login.css";
import LandingNavbar from "../Landingpage/NavbarLanding";
import Footer from "../Footer/Footer";
import { toast , Bounce } from "react-toastify";
import { AuthContext } from "../../context/AuthContext";

const Login = () => {
  const navigate = useNavigate();
  const {login , signup } = useContext(AuthContext)
  const [animate, setAnimate] = useState(false);
  const [isSignup, setIsSignup] = useState(false);
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const [alertType, setAlertType] = useState("error");
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({
    email: "",
    password: "",
    firstName: "",
    lastName: "",
    role: ""
  });
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    role: "USER"
  });

  useEffect(() => {
    setAnimate(true);
  }, []);

  const showAlertMessage = (message, type = "error") => {
    setAlertMessage(message);
    setAlertType(type);
    setShowAlert(true);
    setTimeout(() => {
      setShowAlert(false);
    }, 3000);
  };

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ""
      });
    }
  };
  
  // const updateUserRole = (role) => {
  //   localStorage.setItem("role", role);
  //   window.dispatchEvent(new Event('roleChange'));
  // };

  const handleLogin = async (e) => {
    e.preventDefault();

    const { email, password, role } = formData;
    let newErrors = {};

    if (!validateEmail(email)) newErrors.email = "Invalid email";
    if (password.length < 6) newErrors.password = "Invalid password";
    if (!role) newErrors.role = "Please select a role";

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    setLoading(true);

    try {
      const response = await login(email, password); 

      if (response.success) {
        toast.success(`Login successful as ${response.role}`, {
          position: "bottom-left",
          transition: Bounce,
        });

        // role = response.role;

        setTimeout(() => {
          if (response.role === "SALES") navigate("/dashboard", { replace: true });
          else navigate("/user-dashboard", { replace: true });
        }, 1000);
      } else {
        setLoading(false);
        setErrors({
          email: "Invalid email",
          password: "Invalid password",
        });
        toast.error(response.message, { position: "bottom-left", transition: Bounce });
      }
    } catch (err) {
      setLoading(false);
      toast.error("Login failed!", { position: "bottom-left", transition: Bounce });
    }
  };

  const handleSignup = async (e) => {
  e.preventDefault();

  const { firstName, lastName, email, password } = formData;
  let newErrors = {};

  if (!firstName.trim()) newErrors.firstName = "Required";
  if (!lastName.trim()) newErrors.lastName = "Required";
  if (!validateEmail(email)) newErrors.email = "Invalid email";
  if (password.length < 6) newErrors.password = "Invalid password";

  if (Object.keys(newErrors).length > 0) {
    setErrors(newErrors);
    return;
  }

  setLoading(true);

  try {
    const userData = { firstName, lastName, email, password ,role:"USER"};
    const response = await signup(userData);
    // role = response.role;

    if (response.success) {
      toast.success("Account created successfully!");
      setTimeout(() => {
        navigate("/user-dashboard", { replace: true });
      }, 500);
    } else {
      toast.error(response.message || "Signup failed");
    }
  } catch (err) {
    toast.error("Something went wrong");
  } finally {
    setLoading(false);
  }
};

  const toggleMode = () => {
    setIsSignup(!isSignup);
    setFormData({
      firstName: "",
      lastName: "",
      email: "",
      password: "",
      role: "USER"
    });
    setErrors({
      email: "",
      password: "",
      firstName: "",
      lastName: "",
      role: ""
    });
    setLoading(false);
  };

  return (
    <>
      <LandingNavbar/>
      <div className="login-container" style={{marginTop:"70px" }}>
      {/* <a href="" className="back-home">‚Üê Back to Home</a> */}

      {showAlert && (
        <div className={`alert-notification ${alertType} ${showAlert ? 'show' : ''}`}>
          {alertMessage}
        </div>
      )}

      <div className={`login-left ${animate ? "slide-left" : ""}`}>
        <h1 className="logos">Standard Chartered</h1>
        <p><i>Effortless credit card management starts here. Secure, fast, reliable.</i></p>
      </div>

      <div className={`login-right ${animate ? "slide-right" : ""}`}>
        <h2>Welcome Back</h2>
        <p>{isSignup ? "Sign up to continue" : "Sign in to continue"}</p>
        
        <form 
          onSubmit={isSignup ? handleSignup : handleLogin} 
          className="login-form" 
          key={isSignup ? 'signup' : 'login'} 
          noValidate
        >
          {isSignup && (
            <div className="form-row">
              <div className="input-wrapper">
                <input
                  type="text"
                  name="firstName"
                  placeholder="First Name"
                  value={formData.firstName}
                  onChange={handleChange}
                  className={errors.firstName ? "error" : ""}
                  required
                />
                {errors.firstName && <span className="error-message">{errors.firstName}</span>}
              </div>
              <div className="input-wrapper">
                <input
                  type="text"
                  name="lastName"
                  placeholder="Last Name"
                  value={formData.lastName}
                  onChange={handleChange}
                  className={errors.lastName ? "error" : ""}
                  required
                />
                {errors.lastName && <span className="error-message">{errors.lastName}</span>}
              </div>
            </div>
          )}
          
          <div className="input-wrapper">
            <input
              type="email"
              name="email"
              placeholder="Email address"
              value={formData.email}
              onChange={handleChange}
              className={errors.email ? "error" : ""}
              required
            />
            {errors.email && <span className="error-message">{errors.email}</span>}
          </div>
          
          <div className="input-wrapper">
            <input
              type="password"
              name="password"
              placeholder="Password"
              value={formData.password}
              onChange={handleChange}
              className={errors.password ? "error" : ""}
              required
            />
            {errors.password && <span className="error-message">{errors.password}</span>}
          </div>

          {!isSignup && (
            <div className="input-wrapper">
              <div className="role-label">Select Role</div>
              <div className="role-selector">
                <div
                  className={`role-option ${formData.role === 'USER' ? 'selected' : ''} ${errors.role ? 'error' : ''}`}
                  onClick={() => {
                    setFormData(prev => ({ ...prev, role: 'USER' }));
                    setErrors(prev => ({ ...prev, role: '' }));
                  }}
                >
                  User
                </div>
                <div
                  className={`role-option ${formData.role === 'SALES' ? 'selected' : ''} ${errors.role ? 'error' : ''}`}
                  onClick={() => {
                    setFormData(prev => ({ ...prev, role: 'SALES' }));
                    setErrors(prev => ({ ...prev, role: '' }));
                  }}
                >
                  Sales User
                </div>
              </div>
              {errors.role && <span className="error-message">{errors.role}</span>}
            </div>
          )}
          
          <button type="submit" className="btn-primary"  disabled={loading}>
            {loading ? (
              <span className="btn-loading">
                <span className="spinner"></span>
                {isSignup ? "Creating Account..." : "Logging in..."}
              </span>
            ) : (
              isSignup ? "Signup" : "Login"
            )}
          </button>
          
          <p className="signup-link">
            {isSignup ? "Already have an account? " : "Don't have an account? "}
            <button type="button" className="toggle-link" onClick={toggleMode}>
              {isSignup ? "Login" : "Signup"}
            </button>
          </p>
        </form>
        
        
      </div>
    </div>
   
    </>
  );
};

export default Login;
