/* ============================
   Notification Styling (Polished Circular Card Look)
============================ */

.notification-wrapper {
  position: relative;
}

.notification-btn {
  background: none;
  border: none;
  position: relative;
  cursor: pointer;
  color: #1f2937;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s ease;
}

.notification-btn:hover {
  transform: scale(1.1);
}

.notification-count {
  position: absolute;
  top: -6px;
  right: -8px;
  background: #dc2626;
  color: #fff;
  font-size: 10px;
  border-radius: 50%;
  padding: 2px 6px;
  font-weight: 700;
  box-shadow: 0 0 6px rgba(0, 0, 0, 0.3);
}

.notification-dropdown {
  position: absolute;
  right: -20px;
  top: 45px;
  width: 300px;
  max-height: 420px;
  overflow-y: auto;
  background: linear-gradient(135deg, #111827, #1f2937);
  color: #f9fafb;
  border-radius: 25px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
  padding: 14px 16px;
  z-index: 2000;
  animation: fadeIn 0.25s ease-in-out;
}

.notification-dropdown h4 {
  text-align: center;
  margin-bottom: 10px;
  font-weight: 600;
  font-size: 15px;
  color: #fff;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  padding-bottom: 6px;
}

.notification-item {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  padding: 10px 12px;
  margin-bottom: 8px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: all 0.3s ease;
}

.notification-item.unread {
  background: rgba(255, 255, 255, 0.12);
}

.notification-item:hover {
  background: rgba(255, 255, 255, 0.18);
  transform: translateY(-2px);
}

.notification-content {
  flex: 1;
  padding-right: 8px;
}

.notif-name {
  font-weight: 600;
  font-size: 14px;
  color: #f3f4f6;
}

.notif-email {
  font-size: 12px;
  color: #d1d5db;
  margin-top: 2px;
}

.notif-message {
  font-size: 13px;
  color: #e5e7eb;
  margin-top: 4px;
}

.notif-actions {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
}

.notif-actions button {
  background: rgba(255, 255, 255, 0.1);
  border: none;
  color: #f9fafb;
  cursor: pointer;
  border-radius: 50%;
  width: 26px;
  height: 26px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.notif-actions button:hover {
  background: rgba(96, 165, 250, 0.3);
  color: #60a5fa;
}

.no-data,
.loading-text {
  text-align: center;
  padding: 10px 0;
  font-size: 13px;
  color: #e5e7eb;
}

/* Smooth dropdown animation */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}






notifications.map((msg) => (
  <div
    key={msg.id}
    className={`notification-item ${msg.read ? "read" : "unread"}`}
  >
    <div className="notification-content">
      <p className="notif-name">{msg.fullName}</p>
      <p className="notif-message">{msg.message}</p>
    </div>
    <div className="notif-actions">
      {!msg.read && (
        <button onClick={() => markAsRead(msg.id)} title="Mark as Read">
          <CheckCircle size={14} />
        </button>
      )}
      <button onClick={() => deleteNotification(msg.id)} title="Delete">
        <Trash2 size={14} />
      </button>
    </div>
  </div>
))



















import React from 'react';
import { Menu, X, User, LogOut } from 'lucide-react';
import './Navbar.css';
import { useNavigate } from 'react-router-dom';
import image from './images/standard-chartered-logo.png';



const Navbar = ({ sidebarOpen, toggleSidebar, adminName }) => {
  const navigate = useNavigate();
  let user = null;
  try {
    const storesuser = JSON.parse(localStorage.getItem( "user"));

   user= storesuser ? storesuser: {};
  } catch (error) {

     user = null;
  }



const name = user?.firstName || "Guest";
  return (
    <nav className="dash-navbar">
      <div className="dash-navbar-left">
  <button className="dash-hamburger" onClick={toggleSidebar}>
    {sidebarOpen ? <X size={24} /> : <Menu size={24} />}
  </button>
  <img src={image} alt="NGOS Logo" className="dash-logo-img" /> 
</div>
      <div className="dash-navbar-right">
        <User className="dash-user-icon" size={20} />
        <span className="dash-welcome-text">Welcome, {name}!</span>
        <button className="dash-logout-btn" onClick={()=>{
          localStorage.removeItem("token")
          localStorage.removeItem("role")
          localStorage.removeItem("user")

          window.dispatchEvent(new Event("logout"))

          navigate("/login" , {replace:true})
        }}>
          <LogOut size={18} />
          Logout
        </button>
      </div>
    </nav>
  );
};

export default Navbar;












import React, { useState, useEffect } from "react";
import { Menu, X, User, LogOut, Bell, Trash2, CheckCircle } from "lucide-react";
import "./Navbar.css";
import { useNavigate } from "react-router-dom";
import image from "./images/standard-chartered-logo.png";
import axios from "axios";

const API_BASE = "http://localhost:8080"; // replace with your backend URL

const Navbar = ({ sidebarOpen, toggleSidebar }) => {
  const navigate = useNavigate();
  const [notifications, setNotifications] = useState([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [loading, setLoading] = useState(false);

  let user = null;
  try {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    user = storedUser ? storedUser : {};
  } catch {
    user = null;
  }

  const name = user?.firstName || "Guest";
  const role = localStorage.getItem("role");

  // ðŸ”¹ Fetch all contact queries (no token)
  const fetchNotifications = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${API_BASE}/api/contact/all`);
      const data = res.data || [];
      setNotifications(data);
    } catch (err) {
      console.error("Error fetching notifications:", err);
    } finally {
      setLoading(false);
    }
  };

  // ðŸ”¹ Delete a contact message (no token)
  const deleteNotification = async (id) => {
    try {
      await axios.delete(`${API_BASE}/api/contact/${id}`);
      setNotifications((prev) => prev.filter((n) => n.id !== id));
    } catch (err) {
      console.error("Error deleting message:", err);
    }
  };

  // ðŸ”¹ Mark as read (frontend only)
  const markAsRead = (id) => {
    setNotifications((prev) =>
      prev.map((n) => (n.id === id ? { ...n, read: true } : n))
    );
  };

  useEffect(() => {
    if (role === "SALES") fetchNotifications();
  }, [role]);

  const unreadCount = notifications.filter((n) => !n.read).length;

  return (
    <nav className="dash-navbar">
      <div className="dash-navbar-left">
        <button className="dash-hamburger" onClick={toggleSidebar}>
          {sidebarOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
        <img src={image} alt="Logo" className="dash-logo-img" />
      </div>

      <div className="dash-navbar-right">
        {/* ðŸ”¹ Notification Bell only for SALES role */}
        {role === "SALES" && (
          <div className="notification-wrapper">
            <button
              className="notification-btn"
              onClick={() => setShowDropdown(!showDropdown)}
            >
              <Bell size={22} />
              {unreadCount > 0 && (
                <span className="notification-count">{unreadCount}</span>
              )}
            </button>

            {showDropdown && (
              <div className="notification-dropdown">
                <h4>Contact Queries</h4>
                {loading ? (
                  <p className="loading-text">Loading...</p>
                ) : notifications.length === 0 ? (
                  <p className="no-data">No messages</p>
                ) : (
                  notifications.map((msg) => (
                    <div
                      key={msg.id}
                      className={`notification-item ${
                        msg.read ? "read" : "unread"
                      }`}
                    >
                      <div>
                        <p className="notif-name">{msg.fullName}</p>
                        <p className="notif-email">{msg.email}</p>
                        <p className="notif-message">{msg.message}</p>
                      </div>
                      <div className="notif-actions">
                        {!msg.read && (
                          <button
                            onClick={() => markAsRead(msg.id)}
                            title="Mark as Read"
                          >
                            <CheckCircle size={18} />
                          </button>
                        )}
                        <button
                          onClick={() => deleteNotification(msg.id)}
                          title="Delete"
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            )}
          </div>
        )}

        <User className="dash-user-icon" size={20} />
        <span className="dash-welcome-text">Welcome, {name}!</span>

        <button
          className="dash-logout-btn"
          onClick={() => {
            localStorage.removeItem("token");
            localStorage.removeItem("role");
            localStorage.removeItem("user");
            window.dispatchEvent(new Event("logout"));
            navigate("/login", { replace: true });
          }}
        >
          <LogOut size={18} />
          Logout
        </button>
      </div>
    </nav>
  );
};

export default Navbar;



.notification-wrapper {
  position: relative;
  margin-right: 20px;
}

.notification-btn {
  background: none;
  border: none;
  position: relative;
  cursor: pointer;
  color: white;
}

.notification-count {
  position: absolute;
  top: -5px;
  right: -7px;
  background: red;
  color: white;
  font-size: 10px;
  border-radius: 50%;
  padding: 2px 6px;
}

.notification-dropdown {
  position: absolute;
  right: 0;
  top: 40px;
  background: white;
  width: 300px;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
  padding: 10px;
  z-index: 100;
}

.notification-dropdown h4 {
  margin: 0 0 8px;
  font-weight: 600;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
}

.notification-item {
  border-bottom: 1px solid #eee;
  padding: 6px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.notification-item.unread {
  background: #f9f9ff;
}

.notification-item.read {
  opacity: 0.7;
}

.notif-actions button {
  border: none;
  background: transparent;
  cursor: pointer;
  margin-left: 5px;
  color: #555;
}

.notif-name {
  font-weight: 600;
}

.notif-message {
  font-size: 12px;
  color: #555;
}

.no-data,
.loading-text {
  text-align: center;
  padding: 10px 0;
  font-size: 14px;
  color: #555;
}








.dash-navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 80px;
    background: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 40px;
    z-index: 1000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.dash-navbar-left {
    display: flex;
    align-items: center;
    gap: 20px;
}

.dash-hamburger {
    background: none;
    border: none;
    cursor: pointer;
    color: #1f2937;
    padding: 8px;
    border-radius: 8px;
    transition: all 0.3s ease;
    display: none;
    align-items: center;
    justify-content: center;
}

.dash-hamburger:hover {
    background: #f3f4f6;
}

.dash-logo-text {
    font-size: 28px;
    font-weight: 800;
    letter-spacing: -0.5px;
    background: linear-gradient(to right, #111827, #4f46e5);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
.dash-logo-img {
    height: 100px;
    width: auto;
    object-fit: contain;
}

.dash-navbar-right {
    display: flex;
    align-items: center;
    gap: 20px;
}

.dash-user-icon {
    color: #6b7280;
}

.dash-welcome-text {
    color: #4b5563;
    font-weight: 500;
    font-size: 14px;
}

.dash-logout-btn {
    display: inline-block;
    padding: 0.8rem 2rem;
    font-size: 0.8rem;
    font-weight: 600;
    color: white;
    background: linear-gradient(135deg, rgb(220, 38, 38), rgb(190, 48, 48));
    border: none;
    border-radius: 0.5rem;
    text-decoration: none;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    position: relative;
    overflow: hidden;
    animation: fadeInScale 0.8s ease-out 0.6s backwards, pulseGlow 3s ease-in-out infinite;
}

.dash-logout-btn:hover {
    transform: translateY(-3px);
}


@media (max-width: 768px) {
    .dash-navbar {
        padding: 0 20px;
        height: 70px;
    }

    .dash-hamburger {
        display: flex;
    }

    .dash-welcome-text {
        display: none;
    }
        .dash-logo-img {
            height: 80px;
            width: auto;
            object-fit: contain;
        }
}




.notification-wrapper {
  position: relative;
  margin-right: 20px;
}

.notification-btn {
  background: none;
  border: none;
  position: relative;
  cursor: pointer;
  color: white;
}

.notification-count {
  position: absolute;
  top: -5px;
  right: -7px;
  background: red;
  color: white;
  font-size: 10px;
  border-radius: 50%;
  padding: 2px 6px;
}

.notification-dropdown {
  position: absolute;
  right: 0;
  top: 40px;
  background: white;
  width: 300px;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
  padding: 10px;
  z-index: 100;
}

.notification-dropdown h4 {
  margin: 0 0 8px;
  font-weight: 600;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
}

.notification-item {
  border-bottom: 1px solid #eee;
  padding: 6px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.notification-item.unread {
  background: #f9f9ff;
}

.notification-item.read {
  opacity: 0.7;
}

.notif-actions button {
  border: none;
  background: transparent;
  cursor: pointer;
  margin-left: 5px;
  color: #555;
}

.notif-name {
  font-weight: 600;
}

.notif-message {
  font-size: 12px;
  color: #555;
}

.no-data,
.loading-text {
  text-align: center;
  padding: 10px 0;
  font-size: 14px;
  color: #555;
}

