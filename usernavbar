import React, { useState, useEffect } from 'react';
import { Menu, X, User, LogOut, Bell } from 'lucide-react';
import './Navbar.css';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import image from './images/standard-chartered-logo.png';

const Navbar = ({ sidebarOpen, toggleSidebar }) => {
  const navigate = useNavigate();
  const [contacts, setContacts] = useState([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);

  let user = null;
  let role = null;
  try {
    const storedUser = JSON.parse(localStorage.getItem('user'));
    role = localStorage.getItem('role');
    user = storedUser ? storedUser : {};
  } catch (error) {
    user = null;
  }

  const name = user?.firstName || 'Guest';

  // Fetch contact queries
  useEffect(() => {
    if (role === 'SALES') {
      axios
        .get('http://localhost:8080/api/contact/all')
        .then((res) => {
          setContacts(res.data);
          const unread = res.data.filter((c) => !c.read).length;
          setUnreadCount(unread);
        })
        .catch((err) => console.error('Error fetching contacts:', err));
    }
  }, [role]);

  const toggleDropdown = () => setShowDropdown(!showDropdown);

  const handleMarkRead = (id) => {
    const updated = contacts.map((c) =>
      c.id === id ? { ...c, read: true } : c
    );
    setContacts(updated);
    setUnreadCount(updated.filter((c) => !c.read).length);
  };

  const handleDelete = (id) => {
    axios
      .delete(`http://localhost:8080/api/contact/delete/${id}`)
      .then(() => {
        const updated = contacts.filter((c) => c.id !== id);
        setContacts(updated);
        setUnreadCount(updated.filter((c) => !c.read).length);
      })
      .catch((err) => console.error('Error deleting contact:', err));
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('role');
    localStorage.removeItem('user');
    window.dispatchEvent(new Event('logout'));
    navigate('/login', { replace: true });
  };

  return (
    <nav className="dash-navbar">
      <div className="dash-navbar-left">
        <button className="dash-hamburger" onClick={toggleSidebar}>
          {sidebarOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
        <img src={image} alt="NGOS Logo" className="dash-logo-img" />
      </div>

      <div className="dash-navbar-right">
        {/* Show Notification Bell only for SALES */}
        {role === 'SALES' && (
          <div className="position-relative me-3">
            <button
              type="button"
              className="btn btn-dark rounded-circle position-relative"
              onClick={toggleDropdown}
              style={{ width: '45px', height: '45px' }}
            >
              <Bell size={20} />
              {unreadCount > 0 && (
                <span
                  className="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                  style={{ fontSize: '10px' }}
                >
                  {unreadCount}
                </span>
              )}
            </button>

            {/* Dropdown menu */}
            {showDropdown && (
              <div
                className="dropdown-menu show notification-dropdown fade-in shadow-lg border-0 rounded-4 p-3"
                style={{
                  position: 'absolute',
                  right: 0,
                  top: '55px',
                  width: '300px',
                  backgroundColor: '#212529',
                  color: 'white',
                  zIndex: 9999,
                }}
              >
                <h6 className="text-center mb-3">Contact Queries</h6>
                {contacts.length === 0 ? (
                  <p className="text-center text-secondary">No messages</p>
                ) : (
                  contacts.map((contact) => (
                    <div
                      key={contact.id}
                      className="d-flex justify-content-between align-items-center bg-dark bg-opacity-75 p-2 rounded-3 mb-2"
                    >
                      <div>
                        <strong>{contact.fullname}</strong>
                        <p className="mb-0 small text-light">{contact.message}</p>
                      </div>
                      <div className="d-flex gap-1">
                        <button
                          className="btn btn-success btn-sm rounded-circle"
                          style={{
                            width: '30px',
                            height: '30px',
                            padding: 0,
                          }}
                          title="Mark as Read"
                          onClick={() => handleMarkRead(contact.id)}
                        >
                          âœ“
                        </button>
                        <button
                          className="btn btn-danger btn-sm rounded-circle"
                          style={{
                            width: '30px',
                            height: '30px',
                            padding: 0,
                          }}
                          title="Delete"
                          onClick={() => handleDelete(contact.id)}
                        >
                          ðŸ—‘
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            )}
          </div>
        )}

        <User className="dash-user-icon" size={20} />
        <span className="dash-welcome-text">Welcome, {name}!</span>

        <button className="dash-logout-btn" onClick={handleLogout}>
          <LogOut size={18} />
          Logout
        </button>
      </div>
    </nav>
  );
};

export default Navbar;






/* Fade-in animation for notification dropdown */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in {
  animation: fadeIn 0.3s ease forwards;
}

/* Optional: slightly glowing border for dropdown */
.notification-dropdown {
  border: 1px solid rgba(255, 255, 255, 0.15);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(6px);
}




















import React from 'react';
import { Menu, X, User, LogOut } from 'lucide-react';
import './Navbar.css';
import { useNavigate } from 'react-router-dom';
import image from './images/standard-chartered-logo.png';



const Navbar = ({ sidebarOpen, toggleSidebar, adminName }) => {
  const navigate = useNavigate();
  let user = null;
  try {
    const storesuser = JSON.parse(localStorage.getItem( "user"));

   user= storesuser ? storesuser: {};
  } catch (error) {

     user = null;
  }



const name = user?.firstName || "Guest";
  return (
    <nav className="dash-navbar">
      <div className="dash-navbar-left">
  <button className="dash-hamburger" onClick={toggleSidebar}>
    {sidebarOpen ? <X size={24} /> : <Menu size={24} />}
  </button>
  <img src={image} alt="NGOS Logo" className="dash-logo-img" /> 
</div>
      <div className="dash-navbar-right">
        <User className="dash-user-icon" size={20} />
        <span className="dash-welcome-text">Welcome, {name}!</span>
        <button className="dash-logout-btn" onClick={()=>{
          localStorage.removeItem("token")
          localStorage.removeItem("role")
          localStorage.removeItem("user")

          window.dispatchEvent(new Event("logout"))

          navigate("/login" , {replace:true})
        }}>
          <LogOut size={18} />
          Logout
        </button>
      </div>
    </nav>
  );
};

export default Navbar;












import React, { useState, useEffect } from "react";
import { Menu, X, User, LogOut, Bell, Trash2, CheckCircle } from "lucide-react";
import "./Navbar.css";
import { useNavigate } from "react-router-dom";
import image from "./images/standard-chartered-logo.png";
import axios from "axios";

const API_BASE = "http://localhost:8080"; // replace with your backend URL

const Navbar = ({ sidebarOpen, toggleSidebar }) => {
  const navigate = useNavigate();
  const [notifications, setNotifications] = useState([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [loading, setLoading] = useState(false);

  let user = null;
  try {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    user = storedUser ? storedUser : {};
  } catch {
    user = null;
  }

  const name = user?.firstName || "Guest";
  const role = localStorage.getItem("role");

  // ðŸ”¹ Fetch all contact queries (no token)
  const fetchNotifications = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${API_BASE}/api/contact/all`);
      const data = res.data || [];
      setNotifications(data);
    } catch (err) {
      console.error("Error fetching notifications:", err);
    } finally {
      setLoading(false);
    }
  };

  // ðŸ”¹ Delete a contact message (no token)
  const deleteNotification = async (id) => {
    try {
      await axios.delete(`${API_BASE}/api/contact/${id}`);
      setNotifications((prev) => prev.filter((n) => n.id !== id));
    } catch (err) {
      console.error("Error deleting message:", err);
    }
  };

  // ðŸ”¹ Mark as read (frontend only)
  const markAsRead = (id) => {
    setNotifications((prev) =>
      prev.map((n) => (n.id === id ? { ...n, read: true } : n))
    );
  };

  useEffect(() => {
    if (role === "SALES") fetchNotifications();
  }, [role]);

  const unreadCount = notifications.filter((n) => !n.read).length;

  return (
    <nav className="dash-navbar">
      <div className="dash-navbar-left">
        <button className="dash-hamburger" onClick={toggleSidebar}>
          {sidebarOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
        <img src={image} alt="Logo" className="dash-logo-img" />
      </div>

      <div className="dash-navbar-right">
        {/* ðŸ”¹ Notification Bell only for SALES role */}
        {role === "SALES" && (
          <div className="notification-wrapper">
            <button
              className="notification-btn"
              onClick={() => setShowDropdown(!showDropdown)}
            >
              <Bell size={22} />
              {unreadCount > 0 && (
                <span className="notification-count">{unreadCount}</span>
              )}
            </button>

            {showDropdown && (
              <div className="notification-dropdown">
                <h4>Contact Queries</h4>
                {loading ? (
                  <p className="loading-text">Loading...</p>
                ) : notifications.length === 0 ? (
                  <p className="no-data">No messages</p>
                ) : (
                  notifications.map((msg) => (
                    <div
                      key={msg.id}
                      className={`notification-item ${
                        msg.read ? "read" : "unread"
                      }`}
                    >
                      <div>
                        <p className="notif-name">{msg.fullName}</p>
                        <p className="notif-email">{msg.email}</p>
                        <p className="notif-message">{msg.message}</p>
                      </div>
                      <div className="notif-actions">
                        {!msg.read && (
                          <button
                            onClick={() => markAsRead(msg.id)}
                            title="Mark as Read"
                          >
                            <CheckCircle size={18} />
                          </button>
                        )}
                        <button
                          onClick={() => deleteNotification(msg.id)}
                          title="Delete"
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            )}
          </div>
        )}

        <User className="dash-user-icon" size={20} />
        <span className="dash-welcome-text">Welcome, {name}!</span>

        <button
          className="dash-logout-btn"
          onClick={() => {
            localStorage.removeItem("token");
            localStorage.removeItem("role");
            localStorage.removeItem("user");
            window.dispatchEvent(new Event("logout"));
            navigate("/login", { replace: true });
          }}
        >
          <LogOut size={18} />
          Logout
        </button>
      </div>
    </nav>
  );
};

export default Navbar;



.notification-wrapper {
  position: relative;
  margin-right: 20px;
}

.notification-btn {
  background: none;
  border: none;
  position: relative;
  cursor: pointer;
  color: white;
}

.notification-count {
  position: absolute;
  top: -5px;
  right: -7px;
  background: red;
  color: white;
  font-size: 10px;
  border-radius: 50%;
  padding: 2px 6px;
}

.notification-dropdown {
  position: absolute;
  right: 0;
  top: 40px;
  background: white;
  width: 300px;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
  padding: 10px;
  z-index: 100;
}

.notification-dropdown h4 {
  margin: 0 0 8px;
  font-weight: 600;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
}

.notification-item {
  border-bottom: 1px solid #eee;
  padding: 6px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.notification-item.unread {
  background: #f9f9ff;
}

.notification-item.read {
  opacity: 0.7;
}

.notif-actions button {
  border: none;
  background: transparent;
  cursor: pointer;
  margin-left: 5px;
  color: #555;
}

.notif-name {
  font-weight: 600;
}

.notif-message {
  font-size: 12px;
  color: #555;
}

.no-data,
.loading-text {
  text-align: center;
  padding: 10px 0;
  font-size: 14px;
  color: #555;
}








.dash-navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 80px;
    background: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 40px;
    z-index: 1000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.dash-navbar-left {
    display: flex;
    align-items: center;
    gap: 20px;
}

.dash-hamburger {
    background: none;
    border: none;
    cursor: pointer;
    color: #1f2937;
    padding: 8px;
    border-radius: 8px;
    transition: all 0.3s ease;
    display: none;
    align-items: center;
    justify-content: center;
}

.dash-hamburger:hover {
    background: #f3f4f6;
}

.dash-logo-text {
    font-size: 28px;
    font-weight: 800;
    letter-spacing: -0.5px;
    background: linear-gradient(to right, #111827, #4f46e5);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
.dash-logo-img {
    height: 100px;
    width: auto;
    object-fit: contain;
}

.dash-navbar-right {
    display: flex;
    align-items: center;
    gap: 20px;
}

.dash-user-icon {
    color: #6b7280;
}

.dash-welcome-text {
    color: #4b5563;
    font-weight: 500;
    font-size: 14px;
}

.dash-logout-btn {
    display: inline-block;
    padding: 0.8rem 2rem;
    font-size: 0.8rem;
    font-weight: 600;
    color: white;
    background: linear-gradient(135deg, rgb(220, 38, 38), rgb(190, 48, 48));
    border: none;
    border-radius: 0.5rem;
    text-decoration: none;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    position: relative;
    overflow: hidden;
    animation: fadeInScale 0.8s ease-out 0.6s backwards, pulseGlow 3s ease-in-out infinite;
}

.dash-logout-btn:hover {
    transform: translateY(-3px);
}


@media (max-width: 768px) {
    .dash-navbar {
        padding: 0 20px;
        height: 70px;
    }

    .dash-hamburger {
        display: flex;
    }

    .dash-welcome-text {
        display: none;
    }
        .dash-logo-img {
            height: 80px;
            width: auto;
            object-fit: contain;
        }
}




.notification-wrapper {
  position: relative;
  margin-right: 20px;
}

.notification-btn {
  background: none;
  border: none;
  position: relative;
  cursor: pointer;
  color: white;
}

.notification-count {
  position: absolute;
  top: -5px;
  right: -7px;
  background: red;
  color: white;
  font-size: 10px;
  border-radius: 50%;
  padding: 2px 6px;
}

.notification-dropdown {
  position: absolute;
  right: 0;
  top: 40px;
  background: white;
  width: 300px;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0,0,0,0.2);
  padding: 10px;
  z-index: 100;
}

.notification-dropdown h4 {
  margin: 0 0 8px;
  font-weight: 600;
  border-bottom: 1px solid #eee;
  padding-bottom: 5px;
}

.notification-item {
  border-bottom: 1px solid #eee;
  padding: 6px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.notification-item.unread {
  background: #f9f9ff;
}

.notification-item.read {
  opacity: 0.7;
}

.notif-actions button {
  border: none;
  background: transparent;
  cursor: pointer;
  margin-left: 5px;
  color: #555;
}

.notif-name {
  font-weight: 600;
}

.notif-message {
  font-size: 12px;
  color: #555;
}

.no-data,
.loading-text {
  text-align: center;
  padding: 10px 0;
  font-size: 14px;
  color: #555;
}

