import React, { useEffect, useState } from "react";
import axios from "axios";
import "./MyApplications.css";

const API_BASE = "http://localhost:8080";

// deterministic helper to generate pseudo-card-data from appId (safe for UI only)
const generateCardData = (appId, submittedAt) => {
  // simple numeric hash from appId
  const hash = Array.from(appId).reduce((acc, ch) => acc + ch.charCodeAt(0), 0);
  // build pseudo 16-digit number: take repeated hash digits and last 4 from appId
  const last4 = appId.replace(/-/g, "").slice(-4).toUpperCase();
  let base = ("" + hash).repeat(6).slice(0, 12); // 12 digits
  const cardNumber = `${base}${last4}`.slice(0, 16);

  // expiry: use submittedAt month/year if present, else fall back to +2 years
  let expiryMonth = "12";
  let expiryYear = new Date().getFullYear() + 2;
  if (submittedAt) {
    const dt = new Date(submittedAt);
    if (!isNaN(dt)) {
      expiryMonth = String(dt.getMonth() + 1).padStart(2, "0");
      expiryYear = dt.getFullYear() + 3;
    }
  }
  expiryYear = String(expiryYear).slice(-2); // last two digits

  // cvv: last 3 digits of hash
  const cvv = String(hash).slice(-3).padStart(3, "0");

  return {
    cardNumber,
    expiryMonth,
    expiryYear,
    cvv,
  };
};

const maskCard = (num) => {
  if (!num || num.length < 4) return "**** **** **** ****";
  const clean = num.replace(/\s+/g, "");
  return (
    clean.slice(0, 4) +
    " •••• •••• " +
    clean.slice(-4)
  );
};

const formatCardNumberGrouped = (num) => {
  if (!num) return "0000 0000 0000 0000";
  const clean = num.replace(/\s+/g, "").padEnd(16, "0");
  return clean.replace(/(.{4})/g, "$1 ").trim();
};

export default function MyApplications() {
  const [applications, setApplications] = useState([]);
  const [error, setError] = useState("");
  const token = localStorage.getItem("token");

  useEffect(() => {
    if (!token) {
      setError("Please login to view your applications.");
      return;
    }

    const fetchApplications = async () => {
      try {
        const res = await axios.get(`${API_BASE}/api/application/my-applications`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setApplications(res.data || []);
      } catch (err) {
        console.error(err);
        const msg =
          err?.response?.data?.message ||
          err?.response?.data?.error ||
          err.message ||
          "Failed to fetch applications";
        setError(msg);
      }
    };

    fetchApplications();
  }, [token]);

  const cardThemeClass = (type) => {
    switch (type) {
      case "PLATINUM":
        return "theme-platinum";
      case "GOLD":
        return "theme-gold";
      case "SILVER":
      default:
        return "theme-silver";
    }
  };

  const statusBadgeClass = (status) => {
    if (!status) return "status-wait";
    if (status === "APPROVED") return "status-approved";
    if (status === "REJECTED") return "status-rejected";
    return "status-wait";
  };

  return (
    <div className="apps-wrapper">
      <h2 className="apps-title">My Credit Card Applications</h2>

      {error && <div className="apps-error">{error}</div>}

      {applications.length === 0 && !error ? (
        <div className="apps-empty">No applications found.</div>
      ) : (
        <div className="cards-grid">
          {applications.map((app) => {
            // use real card fields if present, else generate deterministic ones
            const providedCardNumber = app.cardNumber || app.cardNumberMasked || null;
            const providedExpiryMonth = app.expiryMonth || null;
            const providedExpiryYear = app.expiryYear || null;
            const providedCvv = app.cvv || null;

            const generated = generateCardData(app.appId || app.appId || String(Math.random()), app.submittedAt);

            const cardNumberFull = providedCardNumber || generated.cardNumber;
            const expiryMonth = providedExpiryMonth || generated.expiryMonth;
            const expiryYear = providedExpiryYear || generated.expiryYear;
            const cvv = providedCvv || generated.cvv;

            const cardNumberGrouped = formatCardNumberGrouped(cardNumberFull);
            const cardNumberMasked = maskCard(cardNumberFull);

            return (
              <div className="card-flip-container" key={app.appId}>
                <div className={`credit-card ${cardThemeClass(app.cardType || "SILVER")}`}>
                  {/* FRONT */}
                  <div className="card-face card-front">
                    <div className="card-top-row">
                      <div className="card-chip" />
                      <div className={`offer-badge ${statusBadgeClass(app.offerStatus)}`}>
                        {app.offerStatus || "PENDING"}
                      </div>
                    </div>

                    <div className="card-body-front">
                      <div className="card-number-line">{cardNumberMasked}</div>

                      <div className="card-meta-row">
                        <div className="card-holder">
                          <label>Card Holder</label>
                          <div>{app.fullName || "—"}</div>
                        </div>

                        <div className="card-expiry">
                          <label>Expiry</label>
                          <div>{expiryMonth}/{expiryYear}</div>
                        </div>
                      </div>

                      <div className="card-type-label">{app.cardType} CARD</div>
                    </div>

                    <div className="card-footer-front">
                      <small>App ID: {app.appId?.slice(0, 8)}</small>
                      <small className="submitted-on">Submitted: {app.submittedAt ? new Date(app.submittedAt).toLocaleDateString() : "—"}</small>
                    </div>
                  </div>

                  {/* BACK */}
                  <div className="card-face card-back">
                    <div className="magnetic-strip" />
                    <div className="back-body">
                      <div className="back-line">
                        <label>Card Number</label>
                        <div className="mono">{cardNumberGrouped}</div>
                      </div>

                      <div className="back-row">
                        <div className="back-cvv">
                          <label>CVV</label>
                          <div className="mono cvv-box">{cvv}</div>
                        </div>

                        <div className="back-info">
                          <label>Document Status</label>
                          <div className="mono">{app.documentVerificationStatus || "PENDING"}</div>
                          <label style={{ marginTop: 8 }}>Offer Status</label>
                          <div className="mono">{app.offerStatus || "PENDING"}</div>
                        </div>
                      </div>

                      <div className="back-footer">
                        <small>Issued by YourBank</small>
                      </div>
                    </div>
                  </div>
                </div>
                {/* Hint text */}
                <div className="flip-hint">Hover or tap to flip</div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}




//css

/* Page layout */
.apps-wrapper {
  padding: 28px;
  background: linear-gradient(180deg, #f6f9fc 0%, #eef4fb 100%);
  min-height: 100vh;
  font-family: Inter, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  color: #111827;
}

.apps-title {
  text-align: center;
  font-size: 28px;
  font-weight: 700;
  margin-bottom: 18px;
  color: #0f172a;
}

/* grid */
.cards-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-top: 16px;
  align-items: start;
}

/* flip container */
.card-flip-container {
  perspective: 1200px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* card (both faces) */
.credit-card {
  width: 100%;
  max-width: 360px;
  height: 210px;
  border-radius: 16px;
  position: relative;
  transform-style: preserve-3d;
  transition: transform 0.6s cubic-bezier(.2,.9,.3,1), box-shadow .25s;
  box-shadow: 0 10px 30px rgba(2,6,23,0.12);
  cursor: pointer;
}

/* hover flip for desktop */
.card-flip-container:hover .credit-card,
.card-flip-container:focus-within .credit-card {
  transform: rotateY(180deg) translateY(-6px);
  box-shadow: 0 18px 40px rgba(2,6,23,0.18);
}

/* allow tap to flip on mobile */
.card-flip-container:active .credit-card {
  transform: rotateY(180deg) translateY(-6px);
}

/* shared face styles */
.card-face {
  position: absolute;
  inset: 0;
  border-radius: 16px;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 18px;
  color: #fff;
}

/* front */
.card-front {
  z-index: 2;
}

/* back */
.card-back {
  transform: rotateY(180deg);
  z-index: 1;
}

/* chip and top row */
.card-top-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-chip {
  width: 56px;
  height: 36px;
  border-radius: 8px;
  background: linear-gradient(180deg, #f7f7f7, #e1e1e1);
  box-shadow: inset 0 -3px 0 rgba(0,0,0,0.06);
}

/* offer badge (top-right) */
.offer-badge {
  padding: 6px 10px;
  border-radius: 999px;
  font-weight: 700;
  font-size: 12px;
  text-transform: uppercase;
}

/* statuses */
.status-approved { background: rgba(22,163,74,0.95); color: #fff; }
.status-rejected { background: rgba(220,38,38,0.95); color: #fff; }
.status-wait { background: rgba(245,158,11,0.95); color: #000; }

/* front content */
.card-body-front {
  margin-top: 8px;
}

.card-number-line {
  font-size: 18px;
  letter-spacing: 3px;
  margin: 12px 0;
  font-weight: 600;
}

.card-meta-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 12px;
}

.card-holder label,
.card-expiry label {
  display:block;
  font-size: 11px;
  opacity: 0.85;
  margin-bottom: 4px;
}

.card-holder div,
.card-expiry div {
  font-weight: 700;
  font-size: 14px;
}

/* small text */
.card-type-label {
  margin-top: 8px;
  font-weight: 700;
  font-size: 13px;
  opacity: 0.95;
}

/* footer */
.card-footer-front {
  display:flex;
  justify-content:space-between;
  font-size: 12px;
  opacity: 0.9;
}

/* back styles */
.magnetic-strip {
  height: 40px;
  background: rgba(0,0,0,0.35);
  margin-top: 8px;
  border-radius: 4px;
}

.back-body {
  padding: 10px 0;
  color: #0b1220;
  background: rgba(255,255,255,0.95);
  border-radius: 10px;
  margin-top: 10px;
  height: calc(100% - 80px);
  display:flex;
  flex-direction: column;
  justify-content: space-between;
}

.back-line {
  padding: 8px 12px;
  border-bottom: 1px solid rgba(15,23,42,0.06);
}

.back-line label {
  font-size: 11px;
  color: #374151;
}

.mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, "Roboto Mono", monospace; font-size: 13px; color:#0b1220; }

.back-row {
  display:flex;
  gap: 12px;
  padding: 8px 12px;
}

.back-cvv {
  flex: 0 0 90px;
}

.cvv-box {
  background: #fff;
  border-radius: 6px;
  padding: 8px;
  text-align:center;
  box-shadow: 0 2px 6px rgba(2,6,23,0.06);
}

.back-info { flex:1; }

/* back-footer */
.back-footer { padding: 8px 12px; font-size: 12px; color: #475569; }

/* hint */
.flip-hint { margin-top: 8px; font-size: 12px; color: #374151; opacity: 0.85; }

/* Themes: PLATINUM / GOLD / SILVER */

.theme-platinum {
  background: linear-gradient(135deg, #1f2937 0%, #3f4852 100%);
  color: #e6e7e9;
}
.theme-gold {
  /* lighter gold tone */
  background: linear-gradient(135deg, #fff7e6 0%, #f6e3a7 45%, #e9c356 100%);
  color: #1f1b12;
}
.theme-silver {
  background: linear-gradient(135deg, #0ea5ff 0%, #0077e6 100%);
  color: #fff;
}

/* responsive tweaks */
@media (max-width: 640px) {
  .credit-card { max-width: 320px; height: 190px; }
  .card-number-line { font-size: 16px; letter-spacing: 2px; }
}















import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './UserStatus.css';
 
const UserStatus = () => {
  const navigate = useNavigate();
  const [applicationData, setApplicationData] = useState(null);
  const [currentStage, setCurrentStage] = useState(0);
  const [rejectionInfo, setRejectionInfo] = useState(null);
  const [canEdit, setCanEdit] = useState(false);
 
  useEffect(() => {
    loadApplicationStatus();
  }, []);
 
  const loadApplicationStatus = () => {
    const saved = localStorage.getItem('creditCardApplication');
    if (saved) {
      const parsed = JSON.parse(saved);
      setApplicationData(parsed);
     
      if (parsed.status === 'rejected') {
        setRejectionInfo({
          stage: 2,
          reason: parsed.rejectionReason || 'Document verification failed'
        });
        setCurrentStage(2);
        setCanEdit(true);
      } else if (parsed.status === 'in-process') {
        setCurrentStage(2);
        setCanEdit(true);
        setRejectionInfo(null);
      } else if (parsed.status === 'approved') {
        setCurrentStage(3);
        setCanEdit(false);
        setRejectionInfo(null);
      }
    }
  };
 
  const stages = [
    {
      id: 1,
      title: 'Application Submitted',
      description: 'Your application has been received successfully'
    },
    {
      id: 2,
      title: 'Document Verification',
      description: 'All documents are being verified'
    },
    {
      id: 3,
      title: 'Offer Confirmation',
      description: 'Your credit card has been approved'
    }
  ];
 
  const handleEditApplication = () => {
    if (!canEdit) {
      return;
    }
 
    navigate('/apply', {
      state: {
        editApplication: applicationData
      }
    });
  };
 
  const handleNewApplication = () => {
    localStorage.removeItem('creditCardApplication');
   
    navigate('/application');
  };
 
  if (!applicationData) {
    return (
      <div className="status-container">
        <div className="status-header">
          <h1 className="status-title" style={{backgroundImage:"linear-gradient(to bottom, #007b8f, #00434e)" , WebkitBackgroundClip:"text" , backgroundClip:"text" , color:"transparent" , WebkitTextFillColor:"transparent"}}>Application Status</h1>
          <p className="status-subtitle">Track your credit card application progress</p>
        </div>
        <div className="empty-state">
          <div className="empty-icon">
            <svg width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="#d4d4d4" strokeWidth="1.5">
              <circle cx="12" cy="12" r="10"/>
              <line x1="12" y1="8" x2="12" y2="12"/>
              <line x1="12" y1="16" x2="12.01" y2="16"/>
            </svg>
          </div>
          <h2 className="empty-title">No Current Application</h2>
          <p className="empty-description">
            You don't have any active credit card application.
            Please submit your application to track its status.
          </p>
          <button className="apply-now-btn" onClick={() => navigate('/apply')}>
            Apply Now
          </button>
        </div>
      </div>
    );
  }
 
  return (
    <div className="status-container">
      <div className="status-header">
        <h1 className="status-title" style={{backgroundImage:"linear-gradient(to bottom, #007b8f, #00434e)" , WebkitBackgroundClip:"text" , backgroundClip:"text" , color:"transparent" , WebkitTextFillColor:"transparent"}}>Application Status</h1>
        <p className="status-subtitle">Track your credit card application progress</p>
      </div>
 
      <div className="status-card">
        <div className="progress-timeline">
          {stages.map((stage, index) => {
            const isCompleted = currentStage > stage.id;
            const isCurrent = currentStage === stage.id;
            const isRejected = rejectionInfo && rejectionInfo.stage === stage.id;
 
            return (
              <React.Fragment key={stage.id}>
                <div className="progress-step">
                  <div className={`progress-circle ${
                    isRejected ? 'rejected' :
                    isCompleted ? 'completed' :
                    isCurrent ? 'current' : 'pending'
                  }`}>
                    {isRejected ? (
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="3">
                        <line x1="18" y1="6" x2="6" y2="18"/>
                        <line x1="6" y1="6" x2="18" y2="18"/>
                      </svg>
                    ) : isCompleted ? (
                      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="3">
                        <polyline points="20 6 9 17 4 12"/>
                      </svg>
                    ) : (
                      <span className="progress-number">{stage.id}</span>
                    )}
                  </div>
                  <div className="progress-label">
                    <h4 className={`progress-title ${
                      isRejected ? 'rejected-text' :
                      (isCompleted || isCurrent) ? 'active' : ''
                    }`}>
                      {stage.title}
                    </h4>
                    <p className={`progress-desc ${
                      isRejected ? 'rejected-text' :
                      (isCompleted || isCurrent) ? 'active' : ''
                    }`}>
                      {isRejected ? 'Verification Failed' : stage.description}
                    </p>
                  </div>
                </div>
               
                {index < stages.length - 1 && (
                  <div className={`progress-line ${
                    isRejected ? 'rejected' :
                    currentStage > stage.id ? 'completed' : 'pending'
                  }`}></div>
                )}
              </React.Fragment>
            );
          })}
        </div>
 
        {currentStage === 2 && !rejectionInfo && (
          <div className="edit-section">
            <div className="edit-info-box">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#f59e0b" strokeWidth="2">
                <circle cx="12" cy="12" r="10"/>
                <line x1="12" y1="8" x2="12" y2="12"/>
                <line x1="12" y1="16" x2="12.01" y2="16"/>
              </svg>
              <div className="edit-info-content">
                <h4 className="edit-info-title">Document Verification in Progress</h4>
                <p className="edit-info-text">
                  Your documents are currently being verified. If you need to update any information, you can edit your application.
                </p>
              </div>
            </div>
            <button className="edit-stage-btn" onClick={handleEditApplication}>
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
              </svg>
              Edit Application
            </button>
          </div>
        )}
 
        {rejectionInfo && (
          <div className="rejection-alert">
            <div className="rejection-icon">
              <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="#dc2626" strokeWidth="2">
                <circle cx="12" cy="12" r="10"/>
                <line x1="12" y1="8" x2="12" y2="12"/>
                <line x1="12" y1="16" x2="12.01" y2="16"/>
              </svg>
            </div>
            <div className="rejection-content">
              <h3 className="rejection-title">Application Rejected</h3>
              <p className="rejection-stage">
                Rejected at: <strong>{stages[rejectionInfo.stage - 1]?.title}</strong>
              </p>
              <div className="rejection-reason">
                <strong>Reason:</strong> {rejectionInfo.reason}
              </div>
              <button className="edit-application-btn" onClick={handleEditApplication}>
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                  <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
                </svg>
                Edit & Resubmit Application
              </button>
            </div>
          </div>
        )}
 
        <div className="applicant-info">
          <h3 className="info-section-title" style={{backgroundImage:"linear-gradient(to bottom, #007b8f, #00434e)" , WebkitBackgroundClip:"text" , backgroundClip:"text" , color:"transparent" , WebkitTextFillColor:"transparent"}}>Application Details</h3>
          <div className="info-grid">
            <div className="info-item">
              <span className="info-label">Applicant Name</span>
              <span className="info-value">
                {applicationData.firstName} {applicationData.lastName}
              </span>
            </div>
            <div className="info-item">
              <span className="info-label">Application ID</span>
              <span className="info-value">
                #{applicationData.id.slice(0, 10)}
              </span>
            </div>
            <div className="info-item">
              <span className="info-label">Email Address</span>
              <span className="info-value">{applicationData.email}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Contact Number</span>
              <span className="info-value">{applicationData.contactNumber}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Card Type</span>
              <span className="info-badge">{applicationData.cardType}</span>
            </div>
            <div className="info-item">
              <span className="info-label">Submitted On</span>
              <span className="info-value">
                {new Date(applicationData.submittedAt).toLocaleDateString('en-IN', {
                  day: 'numeric',
                  month: 'short',
                  year: 'numeric'
                })}
              </span>
            </div>
          </div>
        </div>
 
        {currentStage === 3 && !rejectionInfo && (
          <div className="success-banner">
            <div className="success-icon-wrapper">
              <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="#16a34a" strokeWidth="2">
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
                <polyline points="22 4 12 14.01 9 11.01"/>
              </svg>
            </div>
            <div className="success-content">
              <h3 className="success-title">🎉 Congratulations! Your Application is Approved</h3>
              <p className="success-text">
                Your credit card has been approved and will be delivered to your registered address within 5-7 business days.
              </p>
              <button className="new-application-button" onClick={handleNewApplication}>
                Apply for New Card
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
 
export default UserStatus;
 
