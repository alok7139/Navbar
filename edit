import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate, useParams } from "react-router-dom";

const API_BASE = "http://localhost:8080"; // ✅ Update if needed

function EditApplication() {
    const navigate = useNavigate();
    const { id } = useParams();

    const [formData, setFormData] = useState({
        fullName: "",
        dateOfBirth: "",
        phoneNumber: "",
        email: "",
        address: "",
        cardType: "",
        aadharPdf: null,
        panPdf: null,
        incomeProofPdf: null,
    });

    const [serverFiles, setServerFiles] = useState({});
    const [errors, setErrors] = useState({});
    const token = localStorage.getItem("token");

    useEffect(() => {
        loadApplicationData();
    }, [id]);

    const loadApplicationData = async () => {
        try {
            const response = await axios.get(`${API_BASE}/api/application/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            const data = response.data;
            setFormData({
                fullName: data.fullName || "",
                dateOfBirth: data.dateOfBirth || "",
                phoneNumber: data.phoneNumber || "",
                email: data.email || "",
                address: data.address || "",
                cardType: data.cardType || "",
                aadharPdf: null,
                panPdf: null,
                incomeProofPdf: null,
            });

            setServerFiles({
                aadhar: data.aadharFilename,
                pan: data.panFilename,
                income: data.incomeProofFilename,
            });

        } catch (err) {
            alert("❌ Error loading application");
            console.error(err);
        }
    };

    const handleInputChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleFileChange = (e, field) => {
        const file = e.target.files[0];
        setFormData({ ...formData, [field]: file });
    };

    const validateForm = () => {
        const newErrors = {};
        if (!formData.fullName.trim()) newErrors.fullName = "Full Name Required";
        if (!/^[0-9]{10}$/.test(formData.phoneNumber)) newErrors.phoneNumber = "Valid Phone Required";
        if (!formData.email) newErrors.email = "Email Required";
        if (!formData.dateOfBirth) newErrors.dateOfBirth = "DOB Required";
        if (!formData.address) newErrors.address = "Address Required";
        if (!formData.cardType) newErrors.cardType = "Card Type Required";

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validateForm()) return;

        const payload = new FormData();
        Object.entries(formData).forEach(([key, value]) => {
            if (value !== null && value !== "") payload.append(key, value);
        });

        try {
            await axios.put(`${API_BASE}/api/application/update/${id}`, payload, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "multipart/form-data",
                },
            });

            alert("✅ Application Updated Successfully!");

            setFormData({
                fullName: "",
                dateOfBirth: "",
                phoneNumber: "",
                email: "",
                address: "",
                cardType: "",
                aadharPdf: null,
                panPdf: null,
                incomeProofPdf: null,
            });

            navigate("/onboarding");

        } catch (error) {
            alert("❌ Update Failed");
            console.error(error);
        }
    };

    const downloadDocument = (type, filename) => {
        window.open(`${API_BASE}/api/application/${id}/download/${type}/${filename}`, "_blank");
    };

    return (
        <div className="container mt-5 pt-5 pb-5">
            <h2 className="text-center fw-bold mb-3" style={{ color: "#007b8f" }}>
                Edit Application
            </h2>

            <form onSubmit={handleSubmit} className="card p-4 shadow-sm">

                {/* Full Name */}
                <div className="mb-3">
                    <label>Full Name *</label>
                    <input
                        type="text"
                        name="fullName"
                        value={formData.fullName}
                        onChange={handleInputChange}
                        className="form-control"
                    />
                    {errors.fullName && <small className="text-danger">{errors.fullName}</small>}
                </div>

                {/* Phone */}
                <div className="mb-3">
                    <label>Phone Number *</label>
                    <input
                        type="text"
                        name="phoneNumber"
                        value={formData.phoneNumber}
                        onChange={handleInputChange}
                        className="form-control"
                    />
                    {errors.phoneNumber && <small className="text-danger">{errors.phoneNumber}</small>}
                </div>

                {/* Email */}
                <div className="mb-3">
                    <label>Email *</label>
                    <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        className="form-control"
                    />
                    {errors.email && <small className="text-danger">{errors.email}</small>}
                </div>

                {/* DOB */}
                <div className="mb-3">
                    <label>Date of Birth *</label>
                    <input
                        type="date"
                        name="dateOfBirth"
                        value={formData.dateOfBirth}
                        onChange={handleInputChange}
                        className="form-control"
                    />
                    {errors.dateOfBirth && <small className="text-danger">{errors.dateOfBirth}</small>}
                </div>

                {/* Address */}
                <div className="mb-3">
                    <label>Address *</label>
                    <textarea
                        name="address"
                        value={formData.address}
                        onChange={handleInputChange}
                        className="form-control"
                    />
                    {errors.address && <small className="text-danger">{errors.address}</small>}
                </div>

                {/* Card Type */}
                <div className="mb-3">
                    <label>Card Type *</label>
                    <select
                        name="cardType"
                        value={formData.cardType}
                        onChange={handleInputChange}
                        className="form-select"
                    >
                        <option value="">Select Card</option>
                        <option value="GOLD">Gold</option>
                        <option value="SILVER">Silver</option>
                        <option value="PLATINUM">Platinum</option>
                    </select>
                    {errors.cardType && <small className="text-danger">{errors.cardType}</small>}
                </div>

                {/* Existing Uploaded Files Preview + Reupload */}
                <div className="mb-3">
                    <label>Aadhar</label>
                    <input
                        type="file"
                        className="form-control"
                        onChange={(e) => handleFileChange(e, "aadharPdf")}
                    />
                    {serverFiles.aadhar && (
                        <button
                            type="button"
                            className="btn btn-link p-0 mt-1"
                            onClick={() => downloadDocument("aadhar", serverFiles.aadhar)}
                        >
                            📥 Download Existing
                        </button>
                    )}
                </div>

                <div className="mb-3">
                    <label>PAN</label>
                    <input
                        type="file"
                        className="form-control"
                        onChange={(e) => handleFileChange(e, "panPdf")}
                    />
                    {serverFiles.pan && (
                        <button
                            type="button"
                            className="btn btn-link p-0 mt-1"
                            onClick={() => downloadDocument("pan", serverFiles.pan)}
                        >
                            📥 Download Existing
                        </button>
                    )}
                </div>

                <div className="mb-3">
                    <label>Income Proof</label>
                    <input
                        type="file"
                        className="form-control"
                        onChange={(e) => handleFileChange(e, "incomeProofPdf")}
                    />
                    {serverFiles.income && (
                        <button
                            type="button"
                            className="btn btn-link p-0 mt-1"
                            onClick={() => downloadDocument("income-proof", serverFiles.income)}
                        >
                            📥 Download Existing
                        </button>
                    )}
                </div>

                <button className="btn btn-success w-100 mt-3" type="submit">
                    ✅ Update Application
                </button>
            </form>
        </div>
    );
}

export default EditApplication;






import {React, useEffect, useState} from "react"
import './EditApplication.css';
import {useNavigate,useLocation, useParams , Link} from 'react-router-dom';
// import userData from './UserData.json';



function EditApplication(){
    const navigate=useNavigate();
    const {id}=useParams();

    const [formData,setFormData]=useState(
        {
            fullName: "",
            dateOfBirth: "",
            phoneNumber: "",
            email: "",
            address: "",
            cardType: "",
            aadharPdf: null,
            panPdf: null,
            incomeProofPdf: null,
        }
    );

    

    const [errors,setErrors]=useState({});
    // useEffect(()=>{
    //     const user=userData.users.find((u)=>u.id===id);
    //     if(user) setFormData(user);
    // },[id])
    const handleInputChange=(e)=>{
        setFormData({...formData,[e.target.name]:e.target.value});
    }
    const handleFileChange=(e,fieldName)=>{
        const file=e.target.files[0];
        if(file){
            const allowedTypes=['application/pdf','image/png','image/jpeg'];
            if(!allowedTypes.includes(file.type)){
                setErrors({...errors,[fieldName]:'only pdf, png or jpeg files are allowed'});
                return;
            }
            setErrors({...errors,[fieldName]:''});
            setFormData({...formData,[fieldName]:file});
        }
    }
    const validateForm=()=>{
        const newErrors={};
        if(!formData.fullName.trim()){
            newErrors.fullName="full name requred";
        }
        if(!formData.phoneNumber.trim()){
            newErrors.phoneNumber="phone number required";
        }
        if(!formData.email.trim()){
            newErrors.email="email required";
        }
        if(!/^[0-9]{10}$/.test(formData.phoneNumber)){
            newErrors.phoneNumber="enter correct phone number";
        }
        if(!formData.address){
            newErrors.address = "Enter the Address";
        }
        if(!formData.dateOfBirth){
            newErrors.dateOfBirth = "Enter the Date Of Birth"
        }
        // if(!/^[a-zA-Z]+@[a-zA-Z]+\.[a-zA-Z]+$/.test(formData.email)){
        //     newErrors.email="enter correct email";
        // }
        if(!/^[a-zA-Z\s]+$/.test(formData.fullName)){
            newErrors.fullName="full name should only contain alphabets";
        }
        if(!formData.cardType){
            newErrors.cardType="Card Type is required";
        }
        if(!formData.aadharPdf){
            newErrors.aadharPdf="Aadhar proof is required";
        }
        if(!formData.panPdf){
            newErrors.panPdf="Pan Proof is required";
        }
        if(!formData.incomeProofPdf){
            newErrors.incomeProofPdf="income Proof is required";
        }
        
        setErrors(newErrors);
        return Object.keys(newErrors).length===0;
    }
    const handleSubmit=(e)=>{
        e.preventDefault();
        if(!validateForm()){
            console.log("incomplete values");
            return;
        }
        console.log("updated successfully");
        // navigate('/onboarding');
    }
    return(
        <>
        <div className="bg-white vh-100 d-flex align-items-center" style={{marginTop:"150px" , marginBottom:"200px"}}>
            <div className="container">
                <div className="row justify-content-center">
                    <div className="col-lg-10 col-xl-12">
                        <h2 className=" fw-semibold mb-3" style={{color:"#007b8f"}}>Edit User Details</h2>
                        <div className="card border-success form-card slide-up">
                            <div className="card-body p-4">
                                <div className="row g-3">
                                    <div className="col md-12">
                                        <label  className="form-label  fw-semibold mb-1"  >Full Name *</label>
                                        <input type="text" value={formData.fullName} className="form-control form-control-sm" name="fullName" onChange={handleInputChange} placeholder="enter full name"/>
                                        {errors.fullName && <small className="text-danger">{errors.fullName}</small>}
                                    </div>
                                    <div className="col md-12">
                                        <label  className="form-label  fw-semibold mb-1">Phone Number *</label>
                                        <input type="tel" value={formData.phoneNumber} className="form-control form-control-sm" name="phone" onChange={handleInputChange} placeholder="enter phone number"/>
                                        {errors.phoneNumber && <small className="text-danger">{errors.phoneNumber}</small>}
                                    </div>
                                    <div className="col md-12">
                                        <label  className="form-label  fw-semibold mb-1">Email *</label>
                                        <input type="email" value={formData.email} className="form-control form-control-sm" name="email" onChange={handleInputChange} placeholder="enter email"/>
                                        {errors.email && <small className="text-danger">{errors.email}</small>}
                                    </div>
                                    <div className="col md-12">
                                        <label  className="form-label  fw-semibold mb-1">Address *</label>
                                        <input type="text" value={formData.address} className="form-control form-control-sm" name="address" onChange={handleInputChange} placeholder="enter Address"/>
                                        {errors.address && <small className="text-danger">{errors.address}</small>}
                                    </div>
                                    <div className="col md-12">
                                        <label  className="form-label  fw-semibold mb-1">DOB *</label>
                                        <input type="dob" value={formData.dateOfBirth} className="form-control form-control-sm" name="dob" onChange={handleInputChange} placeholder="enter DOB"/>
                                        {errors.dateOfBirth && <small className="text-danger">{errors.dateOfBirth}</small>}
                                    </div>
                                    <div className="col-md-12">
                                        <label className="form-label  fw-semibold mb-1">Card Type *</label>
                                        <select  className="form-select form-select-sm" name="product" value={formData.product} onChange={handleInputChange}>
                                            <option value="">Select Card</option>
                                            <option value="SILVER">Silver</option>
                                            <option value="GOLD">Gold</option>
                                            <option value="PLATINUM">Platinum</option>
                                        </select>
                                        {errors.product && <small className="text-danger">{errors.product}</small>}
                                    </div>
                                    <div className="col-md-12">
                                        <label className="form-label  fw-semibold mb-1">Aadhar proof *</label>
                                        <div className="input-group input-group-sm">
                                            <input type="text" className="form-control" value={formData.aadharPdf?.name || 'no file'} readOnly/>
                                            <label className="btn btn-sm btn-primary">
                                                Attach
                                                <input type="file" onChange={(e)=>handleFileChange(e,'aadharPdf')} hidden />
                                            </label>
                                        </div>
                                        {errors.aadharPdf && <small className="text-danger">{errors.aadharPdf}</small>}
                                    </div>
                                    <div className="col-md-12">
                                        <label className="form-label  fw-semibold mb-1">Pan proof *</label>
                                        <div className="input-group input-group-sm">
                                            <input type="text" className="form-control" value={formData.panPdf?.name || 'no file'} readOnly/>
                                            <label className="btn btn-sm btn-primary">
                                                Attach
                                                <input type="file" onChange={(e)=>handleFileChange(e,'panPdf')} hidden />
                                            </label>
                                        </div>
                                        {errors.panPdf && <small className="text-danger">{errors.panPdf}</small>}
                                    </div>
                                    <div className="col-md-12">
                                        <label className="form-label  fw-semibold mb-1">income proof *</label>
                                        <div className="input-group input-group-sm">
                                            <input type="text" className="form-control" value={formData.incomeProofPdf?.name || 'no file'} readOnly/>
                                            <label className="btn btn-sm btn-primary">
                                                Attach
                                                <input type="file" onChange={(e)=>handleFileChange(e,'incomeProofPdf')} hidden />
                                            </label>
                                        </div>
                                        {errors.incomeProofPdf && <small className="text-danger">{errors.incomeProofPdf}</small>}
                                    </div>
                                    
                                    <div className="col-12 mt-3">
                                        <Link to={'/onboarding'}><button onClick={handleSubmit} className="btn w-100" style={{background:"linear-gradient(to bottom, #007b8f, #00434e)" , color:"white" , fontSize:"20px"}}>Submit</button></Link>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </>
    )
}
export default EditApplication;
