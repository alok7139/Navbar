import React, { useState, useEffect, useRef } from 'react';
import { Menu, X, User, LogOut, Bell } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './Navbar.css';
import image from './images/standard-chartered-logo.png';

const Navbar = ({ sidebarOpen, toggleSidebar, adminName }) => {
  const navigate = useNavigate();
  const [notifications, setNotifications] = useState([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const [unreadCount, setUnreadCount] = useState(0);
  const notificationRef = useRef(null);

  let user = null;
  let userRole = null;
  
  try {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    user = storedUser ? storedUser : {};
    userRole = localStorage.getItem("role");
  } catch (error) {
    user = null;
  }

  const name = user?.firstName || "Guest";
  const isSalesRole = userRole === "SALES";

  // Fetch notifications from contactus API
  const fetchNotifications = async () => {
    try {
      const response = await axios.get('YOUR_API_BASE_URL/api/contactus');
      
      setNotifications(response.data);
      // Count unread messages
      const unread = response.data.filter(notif => !notif.isRead).length;
      setUnreadCount(unread);
    } catch (error) {
      console.error('Error fetching notifications:', error);
    }
  };

  // Mark notification as read (local state only - no API)
  const markAsRead = (notificationId) => {
    // Update local state only
    setNotifications(prev =>
      prev.map(notif =>
        notif.id === notificationId ? { ...notif, isRead: true } : notif
      )
    );
    setUnreadCount(prev => Math.max(0, prev - 1));
  };

  // Delete notification
  const deleteNotification = async (notificationId) => {
    try {
      await axios.delete(`YOUR_API_BASE_URL/api/contactus/${notificationId}`);
      
      const deletedNotif = notifications.find(n => n.id === notificationId);
      setNotifications(prev => prev.filter(notif => notif.id !== notificationId));
      
      // Decrease unread count if the deleted notification was unread
      if (deletedNotif && !deletedNotif.isRead) {
        setUnreadCount(prev => Math.max(0, prev - 1));
      }
    } catch (error) {
      console.error('Error deleting notification:', error);
    }
  };

  // Handle notification click (marks as read locally)
  const handleNotificationClick = (notification) => {
    if (!notification.isRead) {
      markAsRead(notification.id);
    }
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (notificationRef.current && !notificationRef.current.contains(event.target)) {
        setShowNotifications(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Fetch notifications on mount and set up polling
  useEffect(() => {
    if (isSalesRole) {
      fetchNotifications();
      // Poll for new notifications every 30 seconds
      const interval = setInterval(fetchNotifications, 30000);
      return () => clearInterval(interval);
    }
  }, [isSalesRole]);

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    localStorage.removeItem("user");
    window.dispatchEvent(new Event("logout"));
    navigate("/login", { replace: true });
  };

  return (
    <nav className="dash-navbar">
      <div className="dash-navbar-left">
        <button className="dash-hamburger" onClick={toggleSidebar}>
          {sidebarOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
        <img src={image} alt="NGOS Logo" className="dash-logo-img" />
      </div>
      
      <div className="dash-navbar-right">
        {/* Notification Bell - Only for SALES role */}
        {isSalesRole && (
          <div className="notification-container" ref={notificationRef}>
            <button
              className="notification-bell"
              onClick={() => setShowNotifications(!showNotifications)}
              aria-label="Notifications"
            >
              <Bell size={20} />
              {unreadCount > 0 && (
                <span className="notification-badge">{unreadCount}</span>
              )}
            </button>

            {showNotifications && (
              <div className="notification-dropdown">
                <div className="notification-header">
                  <h3>Contact Messages</h3>
                  <span className="notification-count">{unreadCount} unread</span>
                </div>
                
                <div className="notification-list">
                  {notifications.length === 0 ? (
                    <div className="notification-empty">No messages yet</div>
                  ) : (
                    notifications.map((notification) => (
                      <div
                        key={notification.id}
                        className={`notification-item ${!notification.isRead ? 'unread' : ''}`}
                        onClick={() => handleNotificationClick(notification)}
                      >
                        <div className="notification-content">
                          <div className="notification-title">
                            {notification.name || 'Anonymous'}
                          </div>
                          <div className="notification-email">
                            {notification.email}
                          </div>
                          <div className="notification-message">
                            {notification.message}
                          </div>
                          <div className="notification-time">
                            {new Date(notification.createdAt || notification.timestamp).toLocaleString()}
                          </div>
                        </div>
                        <button
                          className="notification-delete"
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteNotification(notification.id);
                          }}
                          aria-label="Delete notification"
                        >
                          <X size={16} />
                        </button>
                      </div>
                    ))
                  )}
                </div>
              </div>
            )}
          </div>
        )}

        <User className="dash-user-icon" size={20} />
        <span className="dash-welcome-text">Welcome, {name}!</span>
        <button className="dash-logout-btn" onClick={handleLogout}>
          <LogOut size={18} />
          Logout
        </button>
      </div>
    </nav>
  );
};

export default Navbar;










/* Notification Container */
.notification-container {
  position: relative;
  margin-right: 20px;
}

/* Notification Bell Button */
.notification-bell {
  position: relative;
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #333;
  transition: all 0.3s ease;
  border-radius: 50%;
}

.notification-bell:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

/* Notification Badge */
.notification-badge {
  position: absolute;
  top: 2px;
  right: 2px;
  background-color: #dc3545;
  color: white;
  border-radius: 10px;
  padding: 2px 6px;
  font-size: 11px;
  font-weight: bold;
  min-width: 18px;
  text-align: center;
}

/* Notification Dropdown */
.notification-dropdown {
  position: absolute;
  top: 45px;
  right: 0;
  width: 380px;
  max-height: 500px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

/* Notification Header */
.notification-header {
  padding: 15px 20px;
  border-bottom: 1px solid #e0e0e0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #f8f9fa;
}

.notification-header h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

.notification-count {
  font-size: 12px;
  color: #666;
  background-color: #e9ecef;
  padding: 4px 8px;
  border-radius: 12px;
}

/* Notification List */
.notification-list {
  overflow-y: auto;
  max-height: 420px;
}

.notification-list::-webkit-scrollbar {
  width: 6px;
}

.notification-list::-webkit-scrollbar-track {
  background: #f1f1f1;
}

.notification-list::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 3px;
}

.notification-list::-webkit-scrollbar-thumb:hover {
  background: #555;
}

/* Notification Item */
.notification-item {
  padding: 15px 20px;
  border-bottom: 1px solid #e0e0e0;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  cursor: pointer;
  transition: background-color 0.2s ease;
  position: relative;
}

.notification-item:hover {
  background-color: #f8f9fa;
}

.notification-item.unread {
  background-color: #e3f2fd;
}

.notification-item.unread::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 4px;
  background-color: #2196f3;
}

/* Notification Content */
.notification-content {
  flex: 1;
  padding-right: 10px;
}

.notification-title {
  font-weight: 600;
  font-size: 14px;
  color: #333;
  margin-bottom: 4px;
}

.notification-email {
  font-size: 12px;
  color: #666;
  margin-bottom: 6px;
}

.notification-message {
  font-size: 13px;
  color: #555;
  margin-bottom: 6px;
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.notification-time {
  font-size: 11px;
  color: #999;
}

/* Delete Button */
.notification-delete {
  background: none;
  border: none;
  cursor: pointer;
  padding: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #666;
  border-radius: 4px;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.notification-delete:hover {
  background-color: #ffebee;
  color: #dc3545;
}

/* Empty State */
.notification-empty {
  padding: 40px 20px;
  text-align: center;
  color: #999;
  font-size: 14px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .notification-dropdown {
    width: 320px;
    max-height: 400px;
  }

  .notification-list {
    max-height: 320px;
  }
}

@media (max-width: 480px) {
  .notification-dropdown {
    width: 280px;
    right: -20px;
  }

  .notification-item {
    padding: 12px 15px;
  }

  .notification-header {
    padding: 12px 15px;
  }
}
